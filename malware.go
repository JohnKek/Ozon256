package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"os"
	"strings"
)

func main() {
	var in *bufio.Reader = bufio.NewReader(os.Stdin)
	var out *bufio.Writer = bufio.NewWriter(os.Stdout)
	defer out.Flush()
	var lines, n int
	fmt.Fscan(in, &n)
	for i := 0; i < n; i++ {
		fmt.Fscan(in, &lines)
		var str strings.Builder
		for i := 0; i < lines+1; i++ {
			byteLine, err := in.ReadString('\n')
			if err != nil {
				fmt.Println(err)
				return
			}
			str.Write(bytes.TrimSpace([]byte(byteLine)))
		}
		var root Root
		err := json.Unmarshal([]byte(str.String()), &root)
		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Fprintln(out, check_folder(root, false))
	}
}

func check_folder(folder Root, flag bool) int {
	count := 0
	infected := flag
	if flag {
		count += len(folder.Files)
	} else {
		for _, file := range folder.Files {
			slice := strings.Split(file, ".")
			if slice[len(slice)-1] == "hack" {
				infected = true
				count += len(folder.Files)
				break
			}
		}
	}

	for _, folderU := range folder.Folders {
		count += check_folder(folderU, infected)
	}
	return count
}

type Root struct {
	Dir     string   `json:"dir"`
	Files   []string `json:"files"`
	Folders []Root   `json:"folders"`
}
